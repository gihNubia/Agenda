{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gisele\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\TODO_List\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//import logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport Task from './compenents/task';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const path = \"http://localhost:3000/agenda\";\n  const [tasks, setTasks] = useState([]);\n  function getTasks() {\n    // not archived tasks \n    fetch(path + \"/tasks\", {\n      method: \"GET\"\n    }).then(response => response.json()).then(data => setTasks(data));\n  }\n  function getArchived() {\n    // archived tasks \n    fetch(path + \"/archive\", {\n      method: \"GET\"\n    }).then(response => response.json()).then(data => setTasks(data));\n  }\n  function createTask(item) {\n    fetch(path + \"/archive\", {\n      method: \"POST\",\n      body: {\n        description: item.description\n      }\n    }).then(response => response.json()).then(data => setTasks(data));\n  }\n  function deleteTask(id) {\n    fetch(path + \"/\" + id, {\n      method: \"DELETE\"\n    }).then(response => response.json()).then(data => setTasks(data));\n  }\n  useEffect(() => {\n    getTasks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Agenda\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), tasks.map(task => {\n      return /*#__PURE__*/_jsxDEV(Task, {\n        task: task\n      }, task._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 35\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"ativos/arquivados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Task","jsxDEV","_jsxDEV","App","_s","path","tasks","setTasks","getTasks","fetch","method","then","response","json","data","getArchived","createTask","item","body","description","deleteTask","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","_id","_c","$RefreshReg$"],"sources":["C:/Users/Gisele/OneDrive/Área de Trabalho/TODO_List/frontend/src/App.js"],"sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\n\nimport {useState, useEffect} from 'react'\nimport Task from './compenents/task' \n\nfunction App() {\n  const path = \"http://localhost:3000/agenda\";\n  const [tasks, setTasks] = useState([]);\n\n  function getTasks(){ // not archived tasks \n    fetch(path + \"/tasks\", {method: \"GET\"}).then(response => response.json())\n    .then(data => setTasks(data));\n  }\n\n  function getArchived(){ // archived tasks \n    fetch(path + \"/archive\", {method: \"GET\"}).then(response => response.json())\n    .then(data => setTasks(data));\n  }\n\n  function createTask(item){ \n    fetch(path + \"/archive\", {method: \"POST\", body : {description: item.description, }})\n    .then(response => response.json())\n    .then(data => setTasks(data));\n  }\n\n\n  function deleteTask(id){ \n    fetch(path + \"/\" + id, {method: \"DELETE\"}).then(response => response.json())\n    .then(data => setTasks(data));\n  }\n\n\n\n  useEffect(() => {getTasks()},[]);\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Agenda</h1>\n      \n      {tasks.map(task => {return (<Task key={task._id} task = {task}/>)})}\n\n      <button>ativos/arquivados</button>\n      <button>New Task</button>\n      \n    </div>\n\n    \n\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAO,WAAW;AAElB,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACzC,OAAOC,IAAI,MAAM,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,IAAI,GAAG,8BAA8B;EAC3C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtC,SAASU,QAAQA,CAAA,EAAE;IAAE;IACnBC,KAAK,CAACJ,IAAI,GAAG,QAAQ,EAAE;MAACK,MAAM,EAAE;IAAK,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACxEF,IAAI,CAACG,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC/B;EAEA,SAASC,WAAWA,CAAA,EAAE;IAAE;IACtBN,KAAK,CAACJ,IAAI,GAAG,UAAU,EAAE;MAACK,MAAM,EAAE;IAAK,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAC1EF,IAAI,CAACG,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC/B;EAEA,SAASE,UAAUA,CAACC,IAAI,EAAC;IACvBR,KAAK,CAACJ,IAAI,GAAG,UAAU,EAAE;MAACK,MAAM,EAAE,MAAM;MAAEQ,IAAI,EAAG;QAACC,WAAW,EAAEF,IAAI,CAACE;MAAa;IAAC,CAAC,CAAC,CACnFR,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC/B;EAGA,SAASM,UAAUA,CAACC,EAAE,EAAC;IACrBZ,KAAK,CAACJ,IAAI,GAAG,GAAG,GAAGgB,EAAE,EAAE;MAACX,MAAM,EAAE;IAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3EF,IAAI,CAACG,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC/B;EAIAf,SAAS,CAAC,MAAM;IAACS,QAAQ,CAAC,CAAC;EAAA,CAAC,EAAC,EAAE,CAAC;EAEhC,oBACEN,OAAA;IAAKoB,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBrB,OAAA;MAAAqB,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEdrB,KAAK,CAACsB,GAAG,CAACC,IAAI,IAAI;MAAC,oBAAQ3B,OAAA,CAACF,IAAI;QAAgB6B,IAAI,EAAIA;MAAK,GAAvBA,IAAI,CAACC,GAAG;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CAAC;IAAC,CAAC,CAAC,eAEnEzB,OAAA;MAAAqB,QAAA,EAAQ;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAClCzB,OAAA;MAAAqB,QAAA,EAAQ;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEtB,CAAC;AAKV;AAACvB,EAAA,CA5CQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}